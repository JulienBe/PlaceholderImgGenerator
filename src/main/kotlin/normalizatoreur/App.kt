/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package normalizatoreur

import java.awt.image.BufferedImage
import java.io.File
import javax.imageio.ImageIO


class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}

fun main(args: Array<String>) {
    val img = args.first()
    processImg(img)
}

private fun processImg(img: String) {
    val buffer = ImageIO.read(File("${img}.png"))
    val normal = BufferedImage(buffer.width, buffer.height, BufferedImage.TYPE_INT_ARGB)
    val occluder = BufferedImage(buffer.width, buffer.height, BufferedImage.TYPE_INT_ARGB)
    for (x in 0 until buffer.width) {
        for (y in 0 until buffer.height) {
            if (buffer.getRGB(x, y) == 0)
                continue
            val hasLeft = buffer.exist(x - 1, y)
            val hasRight = buffer.exist(x + 1, y)
            val hasUp = buffer.exist(x, y + 1)
            val hasDown = buffer.exist(x, y - 1)
            var number = if (hasLeft) 1 else 0
            number += if (hasRight) 2 else 0
            number += if (hasUp) 4 else 0
            number += if (hasDown) 8 else 0

            var rY = 127
            var gX = 127
            when (number) {
                1 -> rY = 255
                2 -> rY = 0
                4 -> gX = 255
                5 -> { rY = 193; gX = 193 }
                6 -> { rY = 63; gX = 193 }
                7 -> gX = 193
                8 -> gX = 0
                9 -> { gX = 63; rY = 193 }
                10 -> { gX = 63; rY = 63 }
                11 -> { gX = 63 }
                12 -> { }
                13 -> { rY = 193 }
                14 -> { rY = 63 }
                15 -> {  }
            }
            normal.setRGB(x, y, (255 shl 24) or (rY shl 16) or (gX shl 8) or 255)
            occluder.setRGB(x, y, (255 shl 24) or (127 shl 16) or (127 shl 8) or 127)
        }
    }
    val output = File("${img}_normal.png")
    ImageIO.write(normal, "png", output)
    val occluderOuput = File("${img}_occluder.png")
    ImageIO.write(occluder, "png", occluderOuput)
    println("written ${img}_normal.png")
    println("written ${img}_occluder.png")
}

private fun BufferedImage.exist(x: Int, y: Int): Boolean {
    return if (x < 0 || x >= width || y < 0 || y >= height)
        false
    else
        getRGB(x, y) != 0
}
